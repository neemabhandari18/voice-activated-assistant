import speech_recognition as sr      # Speech-to-text
import pyttsx3                       # Text-to-speech (offline)
import datetime                      # Time & date utilities
import wikipedia                     # Quick summaries
import webbrowser                    # Open URLs
import os                            # (Not used yet, handy for future features)

# ── 1. INITIALISE CORE ENGINES ────────────────────────────────────────────────
engine = pyttsx3.init()              # Create the TTS engine
recognizer = sr.Recognizer()         # Create a speech recogniser

# ── 2. HELPER : speak() ──────────────────────────────────────────────────────
def speak(text: str) -> None:
    """Convert text → speech and print it to the console too."""
    print(f"Assistant: {text}")
    engine.say(text)
    engine.runAndWait()

# ── 3. HELPER : listen() ─────────────────────────────────────────────────────
def listen() -> str:
    """Capture audio from the mic and convert it to lowercase text."""
    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source)  # reduce background noise
        audio = recognizer.listen(source)            # record

    try:
        command = recognizer.recognize_google(audio) # Google STT
        print(f"You said: {command}")
        return command.lower()
    except sr.UnknownValueError:
        speak("Sorry, I didn't catch that.")
    except sr.RequestError:
        speak("Internet error. Please check your connection.")
    return ""  # fall-back if anything goes wrong

# ── 4. MAIN LOOP : run_assistant() ───────────────────────────────────────────
def run_assistant() -> None:
    speak("Hello! How can I help you today?")

    while True:
        command = listen()

        # — Time —
        if "time" in command:
            current_time = datetime.datetime.now().strftime("%I:%M %p")
            speak(f"The time is {current_time}")

        # — Date —
        elif "date" in command:
            current_date = datetime.datetime.now().strftime("%A, %B %d, %Y")
            speak(f"Today is {current_date}")

        # — Wikipedia —
        elif "wikipedia" in command:
            topic = command.replace("wikipedia", "").strip()
            if topic:
                speak(f"Searching Wikipedia for {topic}")
                try:
                    result = wikipedia.summary(topic, sentences=2)
                    speak(result)
                except wikipedia.exceptions.DisambiguationError:
                    speak("Too many results. Please be more specific.")
                except wikipedia.exceptions.PageError:
                    speak("Sorry, I couldn't find anything.")
            else:
                speak("What should I search on Wikipedia?")

        # — Open Google —
        elif "open google" in command:
            speak("Opening Google…")
            webbrowser.open("https://www.google.com")

        # — Quit —
        elif "exit" in command or "quit" in command:
            speak("Goodbye!")
            break

        # — Anything else —
        elif command:                    # command is not empty
            speak("Sorry, I don't understand that command.")

# ── 5. ENTRY POINT ───────────────────────────────────────────────────────────
if __name__ == "__main__":
    run_assistant()
